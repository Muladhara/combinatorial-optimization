# Soluzione del problema rilassato
#
# uso: ampl < fl09_main.run
#
# scrive in trace.txt	      - traccia d'esecuzione
# 		 	trace_obj.txt     - debug oggetti
#           trace_vincoli.txt - debug vincoli
#           fl10_data.dat     - soluzione (da passare all'euristica)

# Usa i sottoprogrammi: fl09_dich.run, fl09_data.dat, fl09_modelli.mod 
# 	  					fl09_verif.run, fl09_tagli.run, fl09_salva_vincolo.run
#						dot_sol.run

# Dichiarazioni e Definizione Variabili
commands fl09_dich.run ;
let dir := "fl09" ;

# modelli core e max-flow/min-cut
model fl09_modelli.mod;


# ------------------------------------------------------------
# Crea la matrice archi-nodi e la matrice nodi-nodi/arco
#
let jj := 0;
for {j in 1..A} {
	for {i in 1..N} {
   		if (M[i,j]==1 and jj==1) then {
  	  	   let jj := 0;
		   let nod[j,2] := i;
		   let fnod[nod[j,1],nod[j,2]]:=j;
		   let fnod[nod[j,2],nod[j,1]]:=j;
	  	   break;
   	    }
   		if (M[i,j]==1 and jj==0) then {
	   	  let jj := 1;
		  let nod[j,1] := i;
	   }
   }
}

print " MAIN: ------------------------------------------------------------ " > trace.txt ;
repeat 
{
  let cc := cc + 1;
  print " MAIN: risolvo il problema core (# cicli ", cc , ")" > trace.txt;
  print " MAIN: risolvo il problema core (# cicli ", cc , ")" > trace_obj.txt;
  print " MAIN: risolvo il problema core (# cicli ", cc , ")" > trace_vincoli.txt;

  #Risolve il problema core
  solve trasmissione > msgs;

  # Calcola il costo totale della soluzione
  let TW := 0;
  let {i in 1..A} TW := TW + x[i]*w[i]; 
  print " MAIN: soluzione di costo=", TW," = |", sum {i in 1..A} ceil(x[i])*w[i] , "| trasmissione=", trasmissione ;
  print " MAIN: soluzione di costo=", TW," = |", sum {i in 1..A} ceil(x[i])*w[i] , "| trasmissione=", trasmissione > trace.txt;
  print " MAIN: soluzione di costo=", TW," = |", sum {i in 1..A} ceil(x[i])*w[i] , "| trasmissione=", trasmissione > trace_obj.txt;
  
  #Verifica la soluzione del problema core
  print " MAIN: verifica la soluzione " > trace.txt;
  commands fl09_verif.run;

  # Stampa la soluzione nella traccia
  display x        > trace_obj.txt;    
  display x        > ( "in_sol_" & cc & ".txt"); 

  # Oracolo di Separazione 
  # solo se non si è deciso di uscire 
  # altrimenti stampa la matrice dei vincoli nella traccia
  #
  if nv = 0 then { commands fl09_tagli.run; } 
  if nv = 1 then { display V    > trace_obj.txt; }
  print " MAIN: Numero di vincoli totali",u > trace.txt ;
  print " MAIN: ----------------------------- " > trace.txt ;

}
until nv > 0;   # esce se nv > 0


   display trasmissione  > trace_obj.txt ;
   display x             > trace_obj.txt ;
   option display_width 80;
   print "data;"         > fl10_data.dat;
   print "param UB = ", trasmissione , ";" > fl10_data.dat;
   print "param"         > fl10_data.dat;
   display x             > fl10_data.dat;
   print "Tempo totale di soluzione: ", _total_solve_time > trace.txt;
